C51 COMPILER V9.00   USART                                                                 03/23/2021 10:57:03 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE USART
OBJECT MODULE PLACED IN .\Objects\USART.obj
COMPILER INVOKED BY: E:\Keil_v5\C51\BIN\C51.EXE USART.C OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\USA
                    -RT.lst) OBJECT(.\Objects\USART.obj)

line level    source

   1          
   2          #include "USART.h"
   3          #include <string.h>
   4          
   5          COMx_Define     COM1;
   6          u8      idata TX1_Buffer[COM_TX1_Lenth];        //发送缓冲
   7          u8      idata RX1_Buffer[COM_RX1_Lenth];        //接收缓冲
   8          u8 SBUFSAVE;
   9          
  10          u8 USART_Configuration(u8 UARTx, COMx_InitDefine *COMx)
  11          {
  12   1              u8      i;
  13   1              u32     j;
  14   1              
  15   1              if(UARTx == USART1)
  16   1              {
  17   2                      COM1.id = 1;
  18   2                      COM1.TX_read    = 0;
  19   2                      COM1.TX_write   = 0;
  20   2                      COM1.B_TX_busy  = 0;
  21   2                      COM1.RX_Cnt     = 0;
  22   2                      COM1.RX_TimeOut = 0;
  23   2                      COM1.B_RX_OK    = 0;
  24   2                      for(i=0; i<COM_TX1_Lenth; i++)  TX1_Buffer[i] = 0;
  25   2                      for(i=0; i<COM_RX1_Lenth; i++)  RX1_Buffer[i] = 0;
  26   2      
  27   2                      if(COMx->UART_Mode > UART_9bit_BRTx)    return 1;       //模式错误
  28   2                      if(COMx->UART_Polity == PolityHigh)             PS = 1; //高优先级中断
  29   2                      else                                                                    PS = 0; //低优先级中断
  30   2                      SCON = (SCON & 0x3f) | COMx->UART_Mode;
  31   2                      if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx))   //可变波特率
  32   2                      {
  33   3                              j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;      //按1T计算
  34   3                              if(j >= 65536UL)        return 2;       //错误
  35   3                              j = 65536UL - j;
  36   3                              if(COMx->UART_BRT_Use == BRT_Timer1)
  37   3                              {
  38   4                                      TR1 = 0;
  39   4                                      AUXR &= ~0x01;          //S1 BRT Use Timer1;
  40   4                                      TMOD &= ~(1<<6);        //Timer1 set As Timer
  41   4                                      TMOD &= ~0x30;          //Timer1_16bitAutoReload;
  42   4                                      AUXR |=  (1<<6);        //Timer1 set as 1T mode
  43   4                                      TH1 = (u8)(j>>8);
  44   4                                      TL1 = (u8)j;
  45   4                                      ET1 = 0;        //禁止中断
  46   4                                      TMOD &= ~0x40;  //定时
  47   4                                      INT_CLKO &= ~0x02;      //不输出时钟
  48   4                                      TR1  = 1;
  49   4                              }
  50   3                              else if(COMx->UART_BRT_Use == BRT_Timer2)
  51   3                              {
  52   4                                      AUXR &= ~(1<<4);        //Timer stop
  53   4                                      AUXR |= 0x01;           //S1 BRT Use Timer2;
  54   4                                      AUXR &= ~(1<<3);        //Timer2 set As Timer
C51 COMPILER V9.00   USART                                                                 03/23/2021 10:57:03 PAGE 2   

  55   4                                      AUXR |=  (1<<2);        //Timer2 set as 1T mode
  56   4                                      TH2 = (u8)(j>>8);
  57   4                                      TL2 = (u8)j;
  58   4                                      IE2  &= ~(1<<2);        //禁止中断
  59   4                                      AUXR &= ~(1<<3);        //定时
  60   4                                      AUXR |=  (1<<4);        //Timer run enable
  61   4                              }
  62   3                              else return 2;  //错误
  63   3                      }
  64   2                      else if(COMx->UART_Mode == UART_ShiftRight)
  65   2                      {
  66   3                              if(COMx->BaudRateDouble == ENABLE)      AUXR |=  (1<<5);        //固定波特率SysClk/2
  67   3                              else                                                            AUXR &= ~(1<<5);        //固定波特率SysClk/12
  68   3                      }
  69   2                      else if(COMx->UART_Mode == UART_9bit)   //固定波特率SysClk*2^SMOD/64
  70   2                      {
  71   3                              if(COMx->BaudRateDouble == ENABLE)      PCON |=  (1<<7);        //固定波特率SysClk/32
  72   3                              else                                                            PCON &= ~(1<<7);        //固定波特率SysClk/64
  73   3                      }
  74   2                      if(COMx->UART_Interrupt == ENABLE)      ES = 1; //允许中断
  75   2                      else                                                            ES = 0; //禁止中断
  76   2                      if(COMx->UART_RxEnable == ENABLE)       REN = 1;        //允许接收
  77   2                      else                                                            REN = 0;        //禁止接收
  78   2                      P_SW1 = (P_SW1 & 0x3f) | (COMx->UART_P_SW & 0xc0);      //切换IO
  79   2                      if(COMx->UART_RXD_TXD_Short == ENABLE)  PCON2 |=  (1<<4);       //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
  80   2                      else                                                                    PCON2 &= ~(1<<4);
  81   2                      return  0;
  82   2              }
  83   1      
  84   1              return 3;
  85   1      }
  86          
  87          
  88          /*************** 装载串口发送缓冲 *******************************/
  89          
  90          void TX1_write2buff(u8 dat)     //写入发送缓冲，指针+1
  91          {
  92   1              TX1_Buffer[COM1.TX_write] = dat;        //装发送缓冲
  93   1              if(++COM1.TX_write >= COM_TX1_Lenth)    COM1.TX_write = 0;
  94   1      
  95   1              if(COM1.B_TX_busy == 0)         //空闲
  96   1              {  
  97   2                      COM1.B_TX_busy = 1;             //标志忙
  98   2                      TI = 1;                                 //触发发送中断
  99   2              }
 100   1      }
 101          
 102          void PrintString1(u8 *puts)
 103          {
 104   1          for (; *puts != 0;  puts++)  TX1_write2buff(*puts);         //遇到停止符0结束
 105   1      }
 106          
 107          /********************* UART1中断函数************************/
 108          void UART1_int (void) interrupt UART1_VECTOR
 109          {
 110   1              UART_DATA_t data_d;
 111   1              if(RI)
 112   1              {
 113   2                      RI = 0;
 114   2                      if(COM1.B_RX_OK == 0)
 115   2                      {
 116   3                              SBUFSAVE = SBUF;
C51 COMPILER V9.00   USART                                                                 03/23/2021 10:57:03 PAGE 3   

 117   3                              memcpy(&data_d ,&SBUFSAVE ,sizeof(SBUFSAVE));
 118   3                              if(data_d.OPNum == 1){
 119   4                                      data_d.devNum = 1;
 120   4                                      memcpy(&SBUFSAVE, &data_d, sizeof(SBUFSAVE));
 121   4                                      SBUF = SBUFSAVE;
 122   4                              }
 123   3                              if(data_d.OPNum == 2){
 124   4                                      data_d.devNum = 2;
 125   4                                      data_d.ldata = num;
 126   4                                      memcpy(&SBUFSAVE, &data_d, sizeof(SBUFSAVE));
 127   4                                      SBUF = SBUFSAVE;
 128   4                              }
 129   3                              if(data_d.OPNum == 3){
 130   4                                      data_d.devNum = 3;
 131   4                                      if(data_d.ldata == 0){
 132   5                                              P13 = 1;
 133   5                                      }
 134   4                                      if(data_d.ldata == 1){
 135   5                                              P13 = 0;
 136   5                                      }
 137   4                                      memcpy(&SBUFSAVE, &data_d, sizeof(SBUFSAVE));
 138   4                                      SBUF = SBUFSAVE;
 139   4                              }
 140   3                              if(COM1.RX_Cnt >= COM_RX1_Lenth)        COM1.RX_Cnt = 0;
 141   3                              RX1_Buffer[COM1.RX_Cnt++] = SBUF;
 142   3                              COM1.RX_TimeOut = TimeOutSet1;
 143   3                      }
 144   2              }
 145   1      
 146   1              if(TI)
 147   1              {
 148   2                      TI = 0;
 149   2                      if(COM1.TX_read != COM1.TX_write)
 150   2                      {
 151   3                              SBUF = TX1_Buffer[COM1.TX_read];
 152   3                              if(++COM1.TX_read >= COM_TX1_Lenth)             COM1.TX_read = 0;
 153   3                      }
 154   2                      else    COM1.B_TX_busy = 0;
 155   2              }
 156   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    748    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8      15
   IDATA SIZE       =     80    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
